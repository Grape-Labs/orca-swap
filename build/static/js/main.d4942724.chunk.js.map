{"version":3,"sources":["OrcaSwap.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["BootstrapDialog","styled","Dialog","theme","padding","spacing","BootstrapDialogTitle","props","children","onClose","other","DialogTitle","sx","m","p","IconButton","onClick","position","right","top","color","palette","grey","OrcaSwap","React","useState","tokenSwapAvailableBalance","setPortfolioSwapTokenAvailableBalance","portfolioPositions","open","setOpen","amounttoswap","setTokensToSwap","userTokenBalanceInput","setTokenBalanceInput","convertedAmountValue","setConvertedAmountValue","setTokenA","setTokenB","lpFees","setLPFees","networkFees","setNetworkFees","minimumOutputAmount","setMinimumOutputAmount","priceImpact","setPriceImpact","rate","setRate","swapfrom","setSwapFrom","swapto","loading","setLoading","connection","useConnection","orca","getOrca","useWallet","publicKey","sendTransaction","wallet","enqueueSnackbar","useSnackbar","handleClose","useCallback","error","message","name","variant","console","getPortfolioTokenBalance","swapingfrom","withmint","balance","portfolio","map","token","mint","swapTokens","tokenPoolA","tokenPoolB","amountToSwap","a","transaction","Transaction","tokenPairA","getTokenB","tokenAmount","Decimal","getQuote","quote","convertedAmount","getMinOutputAmount","swap","swapPayload","toString","toNumber","getTokenA","partialSign","signers","signedTransaction","confirmTransaction","tokenPairB","tokenAmountB","quoteB","convertedAmountB","swapPayloadB","add","getConvertedValue","tokenPair","lpfees","getLPFees","networkfees","getNetworkFees","expectedoutputamount","getExpectedOutputAmount","priceimpact","getPriceImpact","getRate","lpfeesB","expectedoutputamountB","priceimpactB","rateB","useEffect","getPool","OrcaPoolConfig","GRAPE_USDC","SOL_USDC","ORCA_USDC","Button","title","size","mr","ml","onSubmit","event","preventDefault","id","DialogContent","dividers","Grid","container","item","xs","FormControl","InputLabel","Select","labelId","fullWidth","value","onChange","target","label","MenuItem","TextField","inputRef","input","focus","placeholder","autoComplete","type","e","InputProps","inputProps","step","style","textAlign","Typography","ButtonGroup","disabled","defaultValue","Tooltip","fontSize","toFixed","web3","DialogActions","margin","App","network","WalletAdapterNetwork","Mainnet","endpoint","useMemo","clusterApiUrl","wallets","PhantomWalletAdapter","SlopeWalletAdapter","SolflareWalletAdapter","TorusWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","maxSnack","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4942724.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { WalletError } from '@solana/wallet-adapter-base';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Transaction } from '@solana/web3.js';\nimport { getOrca, OrcaPool, OrcaPoolConfig } from \"@orca-so/sdk\";\nimport Decimal from \"decimal.js\";\nimport * as web3 from '@solana/web3.js';\n\nimport { styled } from '@mui/material/styles';\n\nimport {\n  Dialog,\n  Button,\n  ButtonGroup,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  Grid,\n  InputLabel,\n  Tooltip,\n  Typography,\n  MenuItem\n} from '@mui/material';\n\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\n\n//import { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\nimport { useSnackbar } from 'notistack';\n\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz';\n\nfunction trimAddress(addr: string) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport default function OrcaSwap(props: any) {\n    const [tokenSwapAvailableBalance, setPortfolioSwapTokenAvailableBalance] = React.useState(0);\n    const [portfolioPositions, setPortofolioPositions] = React.useState(props.portfolioPositions);\n    const [open, setOpen] = React.useState(false);\n    const [amounttoswap, setTokensToSwap] = React.useState(0);\n    const [userTokenBalanceInput, setTokenBalanceInput] = React.useState(0);\n    const [convertedAmountValue, setConvertedAmountValue] = React.useState(0);\n    const [tokena, setTokenA] = React.useState(null);\n    const [tokenb, setTokenB] = React.useState(null);\n    const [lpFees, setLPFees] = React.useState(null);\n    const [networkFees, setNetworkFees] = React.useState(null);\n    const [minimumOutputAmount, setMinimumOutputAmount] = React.useState(null);\n    const [priceImpact, setPriceImpact] = React.useState(null);\n    const [rate, setRate] = React.useState(null);\n    const [swapfrom, setSwapFrom] = React.useState(props.swapfrom);\n    const [swapto, setSwapTo] = React.useState(props.swapto);\n    \n    const usdc_mint = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v';\n    const sol_mint = 'So11111111111111111111111111111111111111112';\n    const grape_mint = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\n    const orca_mint = 'orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE';\n\n    const [loading, setLoading] = React.useState(false);\n\n    //const mint = props.mint;\n    //const logoURI = props.logoURI;\n    //const name = props.name;\n    //const balance = props.balance;\n    ///const conversionrate = props.conversionrate;\n    const { connection } = useConnection();\n    const orca = getOrca(connection);\n\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const { enqueueSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    const handleClickOpen = () => {\n        setTokenBalanceInput(0);\n        setTokensToSwap(0);\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    function getPortfolioTokenBalance(swapingfrom:string){\n        let withmint = '';\n        if (swapingfrom == 'USDC'){\n            withmint = usdc_mint;\n        } else if (swapingfrom == 'SOL'){\n            withmint = sol_mint;\n        } else if (swapingfrom == 'ORCA'){\n            withmint = orca_mint;\n        }\n\n        let balance = 0;\n        portfolioPositions.portfolio.map((token: any) => {\n            if (token.mint == withmint){\n                if (token.balance > 0)\n                    balance = token.balance;\n            }\n        });\n        setPortfolioSwapTokenAvailableBalance(balance);\n    }\n\n\n    const handleSelectChange = (event: SelectChangeEvent) => {\n        setSwapFrom(event.target.value);\n        getPortfolioTokenBalance(event.target.value);\n        setTokenBalanceInput(0);\n        setTokensToSwap(0);\n        setConvertedAmountValue(0);\n        setLPFees(null);\n        setNetworkFees(null);\n        setMinimumOutputAmount(null);\n        setPriceImpact(null);\n        setRate(null);\n    };\n\n    async function swapTokens(tokenPoolA: OrcaPool, tokenPoolB: OrcaPool, amountToSwap: number) {\n        try{\n            /*** Swap ***/\n            //const orcaSolPool = orca.getPool(OrcaPoolConfig.ORCA_SOL); // Default\n            //const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n            let transaction = new Transaction();\n\n            if (!tokenPoolB){\n                \n                const tokenPairA = tokenPoolA.getTokenB(); // USDC\n                const tokenAmount = new Decimal(amountToSwap); // amount in USDC\n                const quote = await tokenPoolA.getQuote(tokenPairA, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                const swapPayload = await tokenPoolA.swap(publicKey, tokenPairA, tokenAmount, convertedAmount);\n                \n                enqueueSnackbar(`Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenB().name} for at least ${convertedAmount.toNumber()} ${tokenPoolA.getTokenA().name}`,{ variant: 'info' });\n                swapPayload.transaction.partialSign(...swapPayload.signers);\n\n                const signedTransaction = await sendTransaction(swapPayload.transaction, connection);\n                enqueueSnackbar(`Transaction ready`,{ variant: 'info' });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Swapped: ${signedTransaction}`,{ variant: 'success' });\n            } else{\n                const tokenPairA = tokenPoolA.getTokenA(); // SOL_USDC\n                const tokenAmount = new Decimal(amountToSwap); \n                const quote = await tokenPoolA.getQuote(tokenPairA, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                const swapPayload = await tokenPoolA.swap(publicKey, tokenPairA, tokenAmount, convertedAmount);\n                \n                //swapPayload.transaction.partialSign(...swapPayload.signers);\n                \n                //enqueueSnackbar(`Step 1. Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenA().name} for at least ${convertedAmount.toNumber()} ${tokenPoolA.getTokenB().name}`,{ variant: 'info' });\n                const tokenPairB = tokenPoolB.getTokenB(); // GRAPE_USDC\n                const tokenAmountB = new Decimal(convertedAmount.toNumber()); \n                const quoteB = await tokenPoolB.getQuote(tokenPairB, tokenAmountB); // consider adding slippage amount\n                const convertedAmountB = quoteB.getMinOutputAmount();\n                //enqueueSnackbar(`Step 2. Preparing to swap ${tokenAmountB.toString()} ${tokenPoolB.getTokenB().name} for at least ${convertedAmountB.toNumber()} ${tokenPoolB.getTokenA().name}`,{ variant: 'info' });\n                const swapPayloadB = await tokenPoolB.swap(publicKey, tokenPairB, tokenAmountB, convertedAmountB);\n                \n                //swapPayloadB.transaction.partialSign(...swapPayload.signers);\n                \n                enqueueSnackbar(`Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenA().name} for at least ${convertedAmountB.toNumber()} ${tokenPoolB.getTokenA().name}`,{ variant: 'info' });\n                \n                transaction = swapPayload.transaction.add(swapPayloadB.transaction);\n                transaction.partialSign(...swapPayload.signers);\n                transaction.partialSign(...swapPayloadB.signers);\n\n                const signedTransaction = await sendTransaction(transaction, connection);\n\n                enqueueSnackbar(`Transaction ready`,{ variant: 'info' });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Swapped: ${signedTransaction}`,{ variant: 'success' });\n            }\n\n            \n        } catch(e){\n            enqueueSnackbar(`${e}`,{ variant: 'error' });\n        }\n    }\n\n    async function getConvertedValue(tokenPoolA: OrcaPool, tokenPoolB: OrcaPool, amountToSwap: number) {\n        setLoading(true);\n        try{\n            if (!tokenPoolB){ // USDC_GRAPE CONVERSION\n                //const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                const tokenPair = tokenPoolA.getTokenB(); // USDC \n                const tokenAmount = new Decimal(amountToSwap); // amount in USDC\n                const quote = await tokenPoolA.getQuote(tokenPair, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                \n                const lpfees = quote.getLPFees();\n                const networkfees = quote.getNetworkFees();\n                const expectedoutputamount = quote.getExpectedOutputAmount();\n                const priceimpact = quote.getPriceImpact();\n                const rate = quote.getRate();\n                \n                setTokenA(tokenPoolA.getTokenA().name);\n                setTokenB(tokenPoolA.getTokenB().name);\n                \n                setConvertedAmountValue(expectedoutputamount.toNumber());\n                setLPFees(lpfees.toNumber());\n                setNetworkFees(networkfees.toNumber());\n                setMinimumOutputAmount(convertedAmount.toNumber());\n                setPriceImpact(priceimpact.toNumber());\n                setRate(rate.toNumber());\n            } else { // SOL_USDC ... GRAPE_USDC conversion\n                const tokenPairA = tokenPoolA.getTokenA(); // SOL_USDC\n                const tokenAmount = new Decimal(amountToSwap); \n                const quote = await tokenPoolA.getQuote(tokenPairA, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                //enqueueSnackbar(`Step 1. Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenA().name} for at least ${convertedAmount.toNumber()} ${tokenPoolA.getTokenB().name}`,{ variant: 'info' });\n                const tokenPairB = tokenPoolB.getTokenB(); // GRAPE_USDC\n                const tokenAmountB = new Decimal(convertedAmount.toNumber()); \n                const quoteB = await tokenPoolB.getQuote(tokenPairB, tokenAmountB); // consider adding slippage amount\n                const convertedAmountB = quoteB.getMinOutputAmount();\n                //enqueueSnackbar(`Step 2. Preparing to swap ${tokenAmountB.toString()} ${tokenPoolB.getTokenB().name} for at least ${convertedAmountB.toNumber()} ${tokenPoolB.getTokenA().name}`,{ variant: 'info' });\n                //const swapPayloadB = await tokenPoolB.swap(publicKey, tokenPairB, tokenAmountB, convertedAmountB);\n\n                setTokenA(tokenPoolA.getTokenA().name);\n                setTokenB(tokenPoolB.getTokenB().name);\n                \n                const lpfees = quote.getLPFees();\n                const networkfees = quote.getNetworkFees();\n                const expectedoutputamount = quote.getExpectedOutputAmount();\n                const priceimpact = quote.getPriceImpact();\n                const rate = quote.getRate();\n\n                const lpfeesB = quoteB.getLPFees();\n                const networkfeesB = quoteB.getNetworkFees();\n                const expectedoutputamountB = quoteB.getExpectedOutputAmount();\n                const priceimpactB = quoteB.getPriceImpact();\n                const rateB = quoteB.getRate();\n                /*\n                console.log(\"lpfees: \"+lpfees.toNumber());\n                console.log(\"networkfees: \"+networkfees.toNumber());\n                console.log(\"expectedoutputamount: \"+expectedoutputamount.toNumber());\n                console.log(\"priceimpact: \"+priceimpact);\n                console.log(\"rate: \"+rate.toNumber());\n                console.log(\"***\");\n                console.log(\"lpfeesB: \"+lpfeesB.toNumber());\n                console.log(\"networkfeesB: \"+networkfeesB.toNumber());\n                console.log(\"expectedoutputamountB: \"+expectedoutputamountB.toNumber());\n                console.log(\"priceimpactB: \"+priceimpactB);\n                console.log(\"rateB: \"+rateB.toNumber());\n                */\n                setConvertedAmountValue(expectedoutputamountB.toNumber());\n                setLPFees(lpfees.toNumber()+lpfeesB.toNumber());\n                setNetworkFees(networkfees.toNumber());\n\n                setMinimumOutputAmount(convertedAmountB.toNumber());\n                setPriceImpact(priceimpact.toNumber()+priceimpactB.toNumber());\n                \n                //1 SOL = rate.toNumber() USDC\n                //1 USDC = X grape\n                \n                setRate(rateB.toNumber()*rate.toNumber());\n            }\n        } catch(e){\n            enqueueSnackbar(`${e}`,{ variant: 'error' });\n        }\n        setLoading(false);\n    }\n    \n    function HandleSendSubmit(event: any) {\n        event.preventDefault();\n        if ((amounttoswap > 0)&&(amounttoswap < 99999999999999)){\n            if ((swapfrom === 'USDC') && (swapto === 'GRAPE')){\n                const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);    \n                swapTokens(tokenPool, null, amounttoswap);\n                handleClose();\n            } else if ((swapfrom === 'SOL') && (swapto === 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.SOL_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                swapTokens(tokenPoolA, tokenPoolB, amounttoswap);\n                handleClose();\n            } else if ((swapfrom === 'ORCA') && (swapto === 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.ORCA_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                swapTokens(tokenPoolA, tokenPoolB, amounttoswap);\n                handleClose();\n            }\n        }else{\n            setConvertedAmountValue(0);\n            enqueueSnackbar(`Enter the balance you would like to send`,{ variant: 'error' });\n        }\n    }\n\n    React.useEffect(() => {\n        getPortfolioTokenBalance(swapfrom);\n    }, []);\n\n    React.useEffect(() => {\n\n        // get the balance for this token\n        if ((amounttoswap > 0)&&(amounttoswap < 99999999999999)){\n            if ((swapfrom === 'USDC') && (swapto === 'GRAPE')){\n                const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                getConvertedValue(tokenPool, null, amounttoswap);\n            } else if ((swapfrom === 'SOL') && (swapto === 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.SOL_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                getConvertedValue(tokenPoolA, tokenPoolB,amounttoswap);\n            } else if ((swapfrom === 'ORCA') && (swapto === 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.ORCA_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                getConvertedValue(tokenPoolA, tokenPoolB,amounttoswap);\n            }\n        } else{\n            setConvertedAmountValue(0);\n            setLPFees(null);\n            setNetworkFees(null);\n            setMinimumOutputAmount(null);\n            setPriceImpact(null);\n            setRate(null);\n        }\n    }, [amounttoswap]);\n    \n    return (\n        <div>\n            <Button\n                variant=\"outlined\" \n                //aria-controls={menuId}\n                title={`Swap ${swapfrom} > ${swapto}`}\n                onClick={handleClickOpen}\n                size=\"small\"\n                //onClick={isConnected ? handleProfileMenuOpen : handleOpen}\n                >\n                {swapfrom} <SwapHorizIcon sx={{mr:1,ml:1}} /> {swapto}\n            </Button>\n        <BootstrapDialog\n            onClose={handleClose}\n            aria-labelledby=\"customized-dialog-title\"\n            open={open}\n        >   \n            <form onSubmit={HandleSendSubmit}>\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    Swap\n                </BootstrapDialogTitle>\n                <DialogContent dividers>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>     \n                                    <Grid container>\n                                        <Grid item xs={6}> \n                                            <FormControl> \n                                                <InputLabel id=\"from-label\">From</InputLabel>\n                                                <Select\n                                                    labelId=\"from-label\"\n                                                    id=\"from-select-dropdown\"\n                                                    fullWidth\n                                                    value={swapfrom}\n                                                    onChange={handleSelectChange}\n                                                    label=\"From\"\n                                                    >\n                                                    <MenuItem value=\"USDC\">USDC</MenuItem>\n                                                    <MenuItem value=\"SOL\">SOL</MenuItem>\n                                                    <MenuItem value=\"ORCA\">ORCA</MenuItem>\n                                                </Select>\n                                            </FormControl>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField \n                                                id=\"swap-token-amount\" \n                                                inputRef={input => input && input.focus()}\n                                                fullWidth \n                                                placeholder=\"0.00\" \n                                                autoComplete=\"off\"\n                                                variant=\"outlined\"\n                                                //value={parseFloat((userTokenBalanceInput).toString().replace(/^0|[1-9]+/, ''))}\n                                                value={userTokenBalanceInput}\n                                                type=\"number\"\n                                                onChange={(e) => {\n                                                    // here add an additional check if valid number\n                                                    // let regex = \n                                                    // regex.text(e.target.value){\n                                                    setTokensToSwap(+e.target.value)\n                                                    setTokenBalanceInput(+e.target.value)\n                                                    // }\n                                                }}\n                                                InputProps={{\n                                                    inputProps: {\n                                                        step: 0.000000001,\n                                                        style: {\n                                                            textAlign:'right'\n                                                        }\n                                                    }\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    <Grid item xs={2}>\n                                                    \n                                    </Grid>\n                                    <Grid item xs={10}\n                                        sx={{textAlign:'right'}}\n                                    >\n                                        <Typography\n                                            variant=\"caption\"  \n                                        >\n                                            Balance: {tokenSwapAvailableBalance} {swapfrom}\n                                            <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                                <Button \n                                                    onClick={() => {\n                                                        setTokensToSwap(tokenSwapAvailableBalance);\n                                                        setTokenBalanceInput(tokenSwapAvailableBalance);\n                                                    }}\n                                                > \n                                                    Max \n                                                </Button>\n                                                <Button  \n                                                    onClick={() => {\n                                                        setTokensToSwap(+tokenSwapAvailableBalance/2);\n                                                        setTokenBalanceInput(+tokenSwapAvailableBalance/2);\n                                                    }}\n                                                > \n                                                    Half\n                                                </Button>\n                                            </ButtonGroup>\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    <Grid item xs={6}> \n                                        <FormControl> \n                                            <InputLabel id=\"to-label\">To</InputLabel>\n                                            <Select\n                                                labelId=\"to-label\"\n                                                id=\"to-select-dropdown\"\n                                                fullWidth\n                                                value={swapto}\n                                                label=\"To\"\n                                                disabled \n                                                defaultValue=\"Disabled\"\n                                                >\n                                                <MenuItem value=\"GRAPE\">GRAPE</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <TextField \n                                            id=\"swap-result\" \n                                            fullWidth \n                                            autoComplete=\"off\"\n                                            value={convertedAmountValue}\n                                            type=\"number\"\n                                            variant=\"outlined\"\n                                            disabled \n                                            defaultValue=\"Disabled\"\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'right'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <p>\n                        {!loading ?\n                            <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>\n                                {priceImpact &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Price Impact <Tooltip title={`Swaping shifts the ratio of tokens in the pool, which will cause a change in the price per token`}><HelpOutlineIcon sx={{ fontSize:14  }}/></Tooltip>\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {(priceImpact).toFixed(2)}%\n                                        </Grid>\n                                    </Grid>\n                                } \n                                {minimumOutputAmount &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Minimum Received <Tooltip title={`1% slippage tolerance`}><HelpOutlineIcon sx={{ fontSize:14  }}/></Tooltip>\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {minimumOutputAmount.toFixed(6)} {swapto}\n                                        </Grid>\n                                    </Grid>\n                                } \n\n                                {rate &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Rate\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {rate.toFixed(6)} {swapto} per {swapfrom}\n                                        </Grid>\n                                    </Grid>\n                                } \n                                {lpFees &&\n                                    <Grid container spacing={1}>\n                                        <>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                            SWAP Fees <Tooltip title={`ORCA Swap Fees (to LPs): including 0.05% split 80/20 Orca Treasury and Orca Impact Fund`}><HelpOutlineIcon sx={{ fontSize:14  }}/></Tooltip>\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {swapfrom !== 'SOL' ?\n                                                <>\n                                                {(lpFees/amounttoswap*100).toFixed(2)}% = ${lpFees.toFixed(6)}\n                                                </>\n                                            :\n                                                <>{(0.30)}% + {(0.30)}% = ~${lpFees.toFixed(6)*2}</>\n                                            }\n                                        </Grid>\n                                        </>\n                                    </Grid>\n                                } \n                                {networkFees &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Network Fees\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {(networkFees/web3.LAMPORTS_PER_SOL)} SOL\n                                        </Grid>\n                                    </Grid>\n                                } \n                            </Typography>\n                        :\n                            <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>\n                                <Grid container spacing={1}>\n                                    <Grid item xs={12} \n                                            sx={{\n                                                textAlign:'center'\n                                            }}>\n                                        loading...\n                                    </Grid>\n                                </Grid>\n                            </Typography>\n                        }\n                        </p>\n                        \n                </DialogContent>\n                <DialogActions>\n                    <Button     \n                        fullWidth\n                        type=\"submit\"\n                        variant=\"outlined\" \n                        title=\"Swap\"\n                        disabled={userTokenBalanceInput > tokenSwapAvailableBalance}\n                        sx={{\n                            margin:1\n                        }}>\n                        Swap\n                    </Button>\n                </DialogActions>\n            </form>\n        </BootstrapDialog>\n        </div>\n    );\n}","import React, { useMemo } from 'react';\n//import './App.css';\n\nimport OrcaSwap from './OrcaSwap';\nimport { SnackbarProvider } from 'notistack';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { clusterApiUrl } from '@solana/web3.js';\n\nimport { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-material-ui';\n\nimport {\n  //LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n  //CloverWalletAdapter,\n  //MathWalletAdapter,\n  //Coin98WalletAdapter,\n  //SolongWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n\nexport default function App(props: any) {\n  // You can also provide a custom RPC endpoint\n  const network = WalletAdapterNetwork.Mainnet; //.Devnet; //.Mainnet;\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const wallets = useMemo(() => [\n    new PhantomWalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    //new LedgerWalletAdapter(),\n    new SolletWalletAdapter({ network }),\n    new SolletExtensionWalletAdapter({ network }),\n    //new CloverWalletAdapter(),\n    //new MathWalletAdapter(),\n    //new Coin98WalletAdapter(),\n    //new SolongWalletAdapter(),\n  ], [network]);\n\n  let portfolioPositions = { \"portfolio\":[{\"mint\":\"8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA\",\"symbol\":\"GRAPE\",\"coingeckoId\":\"grape-2\",\"balance\":1,\"price\":0.053341,\"value\":0.053341,\"tokenInfo\":{\"chainId\":101,\"address\":\"8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA\",\"symbol\":\"GRAPE\",\"name\":\"Grape\",\"decimals\":6,\"logoURI\":\"\",\"extensions\":{\"coingeckoId\":\"grape-2\",\"website\":\"https://grapes.network\"}},\"usd_24h_change\":-2.61696938875755},{\"mint\":\"So11111111111111111111111111111111111111112\",\"balance\":1,\"price\":141.94,\"value\":141.94,\"tokenInfo\":{\"chainId\":101,\"address\":\"So11111111111111111111111111111111111111112\",\"symbol\":\"SOL\",\"name\":\"SOL\",\"decimals\":9,\"logoURI\":\"\",\"extensions\":{\"coingeckoId\":\"solana\",\"serumV3Usdc\":\"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\"serumV3Usdt\":\"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\"website\":\"https://solana.com/\"}},\"usd_24h_change\":-3.1622724372417026}] }\n  \n    return (\n      <SnackbarProvider maxSnack={3}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletDialogProvider>\n              <WalletMultiButton />\n            </WalletDialogProvider>\n\n            <p>\n            <OrcaSwap swapfrom={\"SOL\"} swapto={\"GRAPE\"} portfolioPositions={portfolioPositions} />\n            </p>\n          </WalletProvider>\n        </ConnectionProvider>\n      </SnackbarProvider>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// measure performance\nreportWebVitals();"],"sourceRoot":""}